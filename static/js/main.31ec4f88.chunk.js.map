{"version":3,"sources":["components/PostItem.tsx","components/PostList.tsx","components/Search.tsx","components/App.tsx","index.js"],"names":["Card","styled","article","Heading","p","Subtitle","Text","Filter","span","PostItem","post","filter","title","body","user","name","username","renderText","text","toLowerCase","startsWith","Fragment","slice","length","PostList","posts","useState","shownPosts","setShownPosts","useEffect","map","key","id","Input","input","Search","handleSearchChange","inputRef","createRef","placeholder","type","ref","onChange","evt","preventDefault","current","value","GlobalStyle","createGlobalStyle","Layout","div","App","setPosts","setFilter","usersRequest","axios","get","process","postsRequest","all","then","spread","responses","usersResponse","data","postsResponse","find","userId","catch","err","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.31ec4f88.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Post } from '../types';\n\ninterface PostItemProps {\n  post: Post;\n  filter: string;\n};\n\nconst Card = styled.article`\n  width: 100%;\n  border-radius: 10px;\n  border: 2px solid tomato;\n  margin: 20px 0;\n  padding: 10px;\n  font-size: 16px;\n`;\nconst Heading = styled.p`\n  font-size: 18px;\n  font-weight: 600;\n  color: tomato;\n`;\nconst Subtitle = styled.p`\n  font-style: italic;\n`;\nconst Text = styled.p`\n  color: gray;\n`;\nconst Filter = styled.span`\n  font-weight: 900;\n  color: black;\n`;\n\nconst PostItem: React.FC<PostItemProps> = ({post, filter}) => {\n  const {title, body} = post;\n  const {name, username} = post.user;\n  \n  const renderText = (text: string) => text.toLowerCase().startsWith(filter.toLowerCase()) ? (\n    <React.Fragment>\n      <Filter>{text.slice(0, filter.length)}</Filter>{text.slice(filter.length)} \n    </React.Fragment>\n  ) : text;\n  \n  return (\n    <Card>\n      <Heading>{renderText(title)}</Heading>\n      <Subtitle><b>{renderText(username)}</b> | {renderText(name)}</Subtitle>\n      <Text>{renderText(body)}</Text>\n    </Card>\n  );\n};\n\nexport default PostItem;","import React, { useState, useEffect } from 'react';\nimport PostItem from './PostItem';\nimport { Post } from '../types';\n\ninterface PostListProps {\n  filter: string;\n  posts: Post[];\n}\n\nconst PostList: React.FC<PostListProps> = ({filter, posts}) => {\n  const [shownPosts, setShownPosts] = useState<Post[]>([]);\n  \n  useEffect(() => {\n    if (filter) {\n      setShownPosts(posts.filter((post) => (\n        post.body.toLowerCase().startsWith(filter.toLowerCase()) ||\n        post.title.toLowerCase().startsWith(filter.toLowerCase()) ||\n        post.user.name.toLowerCase().startsWith(filter.toLowerCase()) ||\n        post.user.username.toLowerCase().startsWith(filter.toLowerCase())\n      )));\n    } else {\n      setShownPosts(posts);\n    }\n  }, [filter, posts]);\n  \n  const renderPosts = () => {\n    if (!posts.length) {\n      return `Loading...`;\n    }\n    return shownPosts.map((post) => (\n      <PostItem\n        key={post.id}\n        post={post}\n        filter={filter}\n      />\n    ));\n  }\n\n  return (\n    <div>\n      {renderPosts()}\n    </div>\n  );\n};\n\nexport default PostList;","import React, {createRef, RefObject} from 'react';\nimport styled from 'styled-components';\n\ninterface SearchProps {\n  handleSearchChange: (value: string) => void;\n};\n\nconst Input = styled.input`\n  width: 100%;\n  border-radius: 10px;\n  margin: 20px 0;\n  padding: 10px;\n  font-size: 16px;\n`;\n\nconst Search: React.FC<SearchProps> = ({handleSearchChange}) => {\n  const inputRef: RefObject<HTMLInputElement> | undefined = createRef();\n  \n  const handleChange = (evt: React.SyntheticEvent) => {\n    evt.preventDefault();\n\n    if (inputRef.current) {\n      handleSearchChange(inputRef.current.value);\n    }\n  };\n\n  return (\n    <Input placeholder=\"Search...\" type=\"text\" name=\"search\" id=\"search\" ref={inputRef} onChange={handleChange} />\n  );\n};\n\nexport default Search;","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport styled, {createGlobalStyle} from 'styled-components';\nimport PostList from './PostList';\nimport Search from './Search';\nimport { RawPost, Post, User } from '../types';\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n  \n  body {\n    background: lightgray;\n    font-family: Open-Sans, Helvetica, Sans-Serif;\n  }\n`;\n\nconst Layout = styled.div`\n  margin: 50px;\n`;\n\nconst App = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [filter, setFilter] = useState(``);\n  \n  useEffect(() => {\n    const usersRequest = axios.get(process.env.REACT_APP_USERS_URL as string);\n    const postsRequest = axios.get(process.env.REACT_APP_POSTS_URL as string);\n    axios.all([usersRequest, postsRequest])\n      .then(\n        axios.spread((...responses) => {\n          const usersResponse = responses[0].data;\n          const postsResponse = responses[1].data;\n          setPosts(postsResponse.map((post: RawPost) => ({\n            ...post, user: usersResponse.find((user: User) => user.id === post.userId)\n          })));\n        })\n      )\n      .catch(err => console.log(err));\n  }, []);\n\n  const handleSearchChange = (value: string) => {\n    setFilter(value);\n  }\n\n  return (\n    <React.Fragment>\n      <GlobalStyle />\n      <Layout>\n        <Search handleSearchChange={handleSearchChange} />\n        <PostList filter={filter} posts={posts} />\n      </Layout>\n    </React.Fragment>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}